@page "/"
@using ProConsulta.Models
@using ProConsulta.Repositories.Schedulings
@using System.Globalization
@inject ISchedulingsRepository _repository


<PageTitle>DASHBOARD</PageTitle>

<MudGrid>
    <MudItem xs="12" class="d-flex justify-center mt-6">
        <MudText Typo="Typo.h3">DASHBOARD</MudText>
    </MudItem>
</MudGrid>

<div class="mt-8">
    <MudChart ChartType="ChartType.Bar"
    ChartSeries="@Series"
    XAxisLabels="@XAxisLabels"
    ChartOptions="@Options"
    Width="100%"
    Height="350px"
    />
</div>

<div Class="mt-8">
        <MudChart ChartType="ChartType.Pie"
        InputData="@data"
        InputLabels="@labels"
        Width="100%"
        Height="350px"/>
</div>

@code{
    private ChartOptions Options = new ChartOptions
        {
            LineStrokeWidth = 20,
            YAxisTicks = 1
        };

    private String[] XAxisLabels { get; set; } = []; /* Serao os meses que vao aparecer na horizontal */
    private List<ChartSeries> Series { get; set; } = new List<ChartSeries>(); /* a quantidade de agendamentos que vao aparecer na vertical*/

    private double[] data { get; set; } = [];
    private String[] labels { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var result = await _repository.GetReportAsync();

        if (result is null || !result.Any())
            return;

        MontaGraficoBarra(result);
        MontaGraficoTorta(result);

    }

    private void MontaGraficoBarra(List<AnnualSchedules> schedules)
    {
        XAxisLabels = schedules
        .Select(x => CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(x.Month)).ToArray();

        var serie = new ChartSeries
            {
                Name = "Atendimentos Mensais",
                Data = schedules.Select(x => (double)x.QuantitySchedules).ToArray()
            };

        Series.Add(serie);
    }


    private void MontaGraficoTorta(List<AnnualSchedules> schedules)
    {
        labels = schedules
                    .Select(x => CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(x.Month)).ToArray();
        data = schedules.Select(x => (double)x.QuantitySchedules).ToArray();


    }


}